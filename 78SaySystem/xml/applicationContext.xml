<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jaxws="http://cxf.apache.org/jaxws"  
    xmlns:cxf="http://cxf.apache.org/core" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-2.5.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
	http://cxf.apache.org/jaxws
	http://cxf.apache.org/schemas/jaxws.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- ========================= GENERAL DEFINITIONS ========================= -->
	<!-- 读取jdbc.properties文件,并将它们设置为这个类的属性中 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
		<!--连接池中保留的最小连接数。--> 
        <property name="minPoolSize" value="5"/> 

		<!--连接池中保留的最大连接数。Default: 15 --> 
        <property name="maxPoolSize" value="10"/> 

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 --> 
        <property name="initialPoolSize" value="10"/> 

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --> 
        <property name="maxIdleTime" value="60"/> 

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --> 
        <property name="acquireIncrement" value="5"/> 

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 
		  属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
		  如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--> 
        <property name="maxStatements" value="0"/> 

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 --> 
        <property name="idleConnectionTestPeriod" value="60"/>  

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
        <property name="acquireRetryAttempts" value="30"/> 

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 
		  保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
		  获取连接失败后该数据源将申明已断开并永久关闭。Default: false--> 
        <property name="breakAfterAcquireFailure" value="false"/> 

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 
		  时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
		  等方法来提升连接测试的性能。Default: false --> 
        <property name="testConnectionOnCheckout" value="false"/> 
	</bean>
	
	<!-- 根据base-package指定的路径,扫描其下所有包含注解的bean,并自动注入 -->
	<!-- 使Spring关注Annotation -->     
	<context:annotation-config/>          
	<!-- 让Spring通过自动扫描来查询和管理Bean -->     
	<context:component-scan base-package="com.lcm"/> 

	<!--  定义hibernate相关的配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="packagesToScan" value="com.lcm.entity.*"/>
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
	</bean>
	
	<!-- 事物定义 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate" name="hibernateTemplate">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	
	<bean id="dao" class="com.lcm.dao.base.Dao" name="dao">
		<property name="hibernateTemplate">
			<ref local="hibernateTemplate"/>
		</property>
	</bean>
	
	<!-- 配置式来定义事物 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="pointcut"
			expression="execution(* com.lcm.service.*.impl.*.*(..))" />
		<aop:advisor pointcut-ref="pointcut" advice-ref="txAdvice" />
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="send*" propagation="REQUIRED"/>
			<tx:method name="count*" read-only="true"/>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />             
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 统一异常处理  ExceptionInterceptor配置 -->
	<bean id="exceptionAdvisor" class="com.lcm.util.interceptor.ExceptionAdvisor"/>
	
	<!-- 配置式来输入异常 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="actionExpointcut"
			expression="execution(* com.lcm.action.*.*.*.*(..))" />
		<aop:advisor pointcut-ref="actionExpointcut" advice-ref="exceptionAdvisor" />
	</aop:config>
</beans>
